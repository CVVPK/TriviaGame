{"version":3,"sources":["components/Settings/SettingsProvider.js","trivia/sessionToken.js","trivia/request.js","trivia/getQ.js","components/Question/QuestionProvider.js","components/Game/EndGameDisplay.js","components/Game/Score.js","components/Timer/Timer.js","components/Timer/timeDifficulty.js","components/Question/QuestionDisplay.js","components/Question/AnswersDisplay.js","components/Game/PlayingDisplay.js","components/Game/PauseOverlay.js","components/Game/GameDisplay.js","components/Game/Game.js","trivia/getCategories.js","components/Settings/LevelSelect.js","serviceWorker.js","index.js","App.js"],"names":["Settings","React","createContext","SettingsProvider","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","category","JSON","stringify","id","name","difficulty","_ref$target","_ref","target","value","setState","defineProperty","event","alert","setDisplayGame","react_default","a","createElement","Provider","categoryId","parse","categoryName","onChange","handleChange","bind","onClick","handleClick","children","Component","sessionToken","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","request","sent","abrupt","token","stop","_x","_request","apply","arguments","query","_args","length","undefined","t1","t2","t0","concat","Promise","resolve","reject","xhr","XMLHttpRequest","endpoint","open","send","addEventListener","readyState","responseText","hasOwnProperty","response_code","getQ","_getQ","amount","join","results","Question","QuestionProvider","questions","question","correct_answer","answers","newQ","refilling","refillPromise","setQAndA","assertThisInitialized","populateQuestions","_this2","newQuestions","toConsumableArray","Math","floor","Error","_this3","then","catch","error","message","_this4","_this$question","incorrect_answers","shuffle","pauseGame","resumeGame","finishGame","_this5","startGame","pop","refillQuestions","arr","copy","i","rand","random","_ref2","EndGameDisplay","score","endGameMsg","Grid","container","direction","justify","alignItems","Typography","variant","color","Score","className","Timer","time","timeSettings","initTime","initExtra","interval","paused","setInterval","clearInterval","stopTimer","startTimer","pause","extraTime","addExtraTime","pauseResume","stopAtZero","timeDifficulty","easy","TimeSettings","medium","hard","ultimate","QuestionDisplay","style","Consumer","dangerouslySetInnerHTML","__html","AnswersDisplay","alignContent","spacing","_ref$state","map","answer","Answer","key","item","xs","Button","fullWidth","answerStyle","padding","height","PlayingDisplay","playing","Fragment","Timer_Timer","capitalize","questionStyle","CircularProgress","size","thickness","str","replace","match","p1","p2","toUpperCase","display","justifyContent","flexGrow","textAlign","fontSize","PauseOverlay","pauseStyle","align","pauseText","LinearProgress","marginTop","zIndex","position","left","top","right","bottom","opacity","backgroundColor","GameDisplay","_ref$props","_ref$props$state","finish","QuestionProvider_QuestionProvider","Game","correct","newScore","isExtraTime","msg","trivia_categories","useStyles","makeStyles","theme","playBtn","select","LevelSelect","classes","FormControl","DifficultySelect","CategorySelect","Fab","InputLabel","htmlFor","NativeSelect","input","Input","_ref3","_useState","useState","_useState2","slicedToArray","categories","setCategories","_getCategories","getCategories","Boolean","window","location","hostname","ReactDOM","render","displayGame","Container","maxWidth","SettingsProvider_SettingsProvider","Game_Game","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bcd2debb.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Settings = React.createContext();\n\n// Defines the game settings state and functionality to change them.\nexport default class SettingsProvider extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            category: JSON.stringify({ id: 9, name: \"General Knowledge\" }),\n            difficulty: \"easy\"\n        };\n    }\n    handleChange({ target: { value, name } }) {\n        this.setState({ [name]: value });\n    }\n    handleClick(event) {\n        if (this.state.category === \"\" || this.state.difficulty === \"\")\n            alert(\"Set difficulty and category\");\n        else this.setState(this.props.setDisplayGame(true));\n    }\n    render() {\n        return (\n            <Settings.Provider\n                value={{\n                    state: this.state,\n                    categoryId: JSON.parse(this.state.category).id,\n                    categoryName: JSON.parse(this.state.category).name,\n                    difficulty: this.state.difficulty,\n                    onChange: this.handleChange.bind(this),\n                    onClick: this.handleClick.bind(this)\n                }}\n            >\n                {this.props.children}\n            </Settings.Provider>\n        );\n    }\n}\n","import request from \"./request\";\n\n// Get an api token to prevent duplicate questions\nexport const sessionToken = (async function() {\n    const query = \"api_token.php?command=request\";\n    const response = await request(query, false);\n    return response.token;\n})();\n","import { sessionToken } from \"./sessionToken\";\n\n// Promise to handle a request\nexport default async function request(query, useToken = true) {\n    const token = useToken ? `&token=${await sessionToken}` : \"\";\n    const url = \"https://opentdb.com/\";\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        const endpoint = url + query + token;\n        xhr.open(\"GET\", endpoint);\n        xhr.send();\n        xhr.addEventListener(\"readystatechange\", () => {\n            if (xhr.readyState === 4) {\n                const response = JSON.parse(xhr.responseText);\n                if (response.hasOwnProperty(\"response_code\")) {\n                    if (response.response_code === 0) {\n                        resolve(response);\n                    } else reject(response.response_code);\n                } else if (response.hasOwnProperty(\"trivia_categories\")) {\n                    resolve(response);\n                }\n            }\n        });\n    });\n}\n","import request from \"./request\";\n\n// Get a random question from the API DB\nexport default async function getQ({ category, difficulty }, amount = 50) {\n    const query = [\n        `api.php?amount=${amount}`,\n        `category=${category}`,\n        `difficulty=${difficulty !== \"ultimate\" ? difficulty : \"\"}`\n    ];\n    const response = await request(query.join(\"&\"));\n\n    return response.results;\n}\n","import React from \"react\";\nimport getQ from \"trivia/getQ\";\n\nexport const Question = React.createContext();\n\n// Defines the question state and functionality\nexport default class QuestionProvider extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questions: [],\n            question: \"\",\n            correct_answer: \"\",\n            answers: [],\n            newQ: this.props.newQ,\n            refilling: false,\n            refillPromise: undefined\n        };\n        this.setQAndA = this.setQAndA.bind(this);\n        this.populateQuestions = this.populateQuestions();\n    }\n\n    // Allows this.state.questions to be populated.\n    populateQuestions(maxAmount = 50) {\n        let amount = maxAmount;\n\n        return async () => {\n            do {\n                try {\n                    const newQuestions = await getQ(this.props, amount);\n                    let questions = [...newQuestions, ...this.state.questions];\n                    this.setState({ questions: questions });\n                    return;\n                } catch (response_code) {\n                    if (response_code === 4 && amount >= 2) {\n                        amount = Math.floor(amount / 2);\n                    }\n                }\n            } while (amount > 2);\n            throw Error(\"No more Questions!\");\n        };\n    }\n\n    // Allows refilling of this.state.questions\n    refillQuestions() {\n        if (!this.state.refilling) {\n            const refillPromise = new Promise((resolve, reject) => {\n                this.populateQuestions()\n                    .then(() => {\n                        this.setState({ refilling: false });\n                        resolve();\n                    })\n                    .catch((error) => reject(error.message));\n            });\n\n            this.setState({ refilling: true, refillPromise: refillPromise });\n        }\n    }\n\n    // Allows requesting a single question from this.state.questions\n    get question() {\n        let questions = this.state.questions;\n        let question = questions.pop();\n\n        if (questions.length < 10) {\n            this.refillQuestions();\n        }\n        if (question === undefined) {\n            throw Error(\"Refilling\");\n        } else this.setState({ questions: questions });\n\n        return question;\n    }\n\n    // Sets the current Question and Answers.\n    setQAndA() {\n        try {\n            const {\n                question,\n                correct_answer,\n                incorrect_answers\n            } = this.question;\n            const answers = shuffle([correct_answer, ...incorrect_answers]);\n\n            this.setState({\n                question: question,\n                correct_answer: correct_answer,\n                answers: answers\n            });\n        } catch (error) {\n            // Pause the game until the questions have been refilled.\n            if (error.message === \"Refilling\") {\n                this.props.pauseGame();\n                this.state.refillPromise\n                    .then(() => {\n                        this.setQAndA();\n                        this.props.resumeGame();\n                    })\n                    .catch((error) => {\n                        this.props.resumeGame();\n                        this.props.finishGame(error);\n                    });\n            } else throw error;\n        }\n    }\n\n    // Set initial Question and Answer and start game\n    componentDidMount() {\n        this.populateQuestions().then(() => {\n            this.setQAndA();\n            this.props.startGame();\n        });\n    }\n\n    // Check if the game needs to change question on update.\n    componentDidUpdate() {\n        if (this.props.newQ !== this.state.newQ) {\n            this.setState({ newQ: !this.state.newQ });\n            this.setQAndA();\n        }\n    }\n\n    render() {\n        return (\n            <Question.Provider\n                value={{\n                    state: this.state,\n                    onClick: this.props.onClick\n                }}\n            >\n                {this.props.children}\n            </Question.Provider>\n        );\n    }\n}\n\nconst shuffle = (arr) => {\n    let copy = arr;\n    for (let i = copy.length - 1; i > 0; i--) {\n        const rand = Math.floor(Math.random() * (i + 1));\n        [copy[i], copy[rand]] = [copy[rand], copy[i]];\n    }\n    return copy;\n};\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\n\n// Component to serve the end of game screen\nexport default function EndGameDisplay({ score, endGameMsg }) {\n    return (\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n            <Typography variant=\"h1\" color=\"textPrimary\" justify=\"center\">\n                {endGameMsg}\n            </Typography>\n            <Typography variant=\"h2\" color=\"textSecondary\">\n                Final Score: {score}\n            </Typography>\n        </Grid>\n    );\n}\n","import React from \"react\";\n\n// Component to show current score.\nexport default function Score({ score }) {\n    return <div className=\"score\"> Score: {score}</div>;\n}\n","import React from \"react\";\n\n// Component to display a timer, provides necessary functionality to control it.\nexport default class Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            time: this.props.timeSettings.initTime,\n            initExtra: this.props.timeSettings.initExtra,\n            interval: null,\n            paused: false\n        };\n    }\n\n    startTimer() {\n        let interval = setInterval(() => {\n            let time = this.state.time;\n            this.setState({ time: --time });\n        }, 1000);\n        this.setState({ interval: interval });\n    }\n\n    stopTimer() {\n        clearInterval(this.state.interval);\n    }\n\n    stopAtZero() {\n        if (this.state.time === 0) {\n            this.stopTimer();\n            this.props.finishGame(\"Time is up!\");\n        }\n    }\n\n    pauseResume() {\n        if (!this.state.paused) this.stopTimer();\n        else this.startTimer();\n\n        this.setState({ paused: !this.state.paused });\n    }\n\n    addExtraTime() {\n        let time = this.state.time;\n        time += this.state.initExtra;\n        this.setState({ time: time });\n    }\n\n    componentDidMount() {\n        this.startTimer();\n    }\n\n    componentDidUpdate({ pause, extraTime }) {\n        if (this.props.extraTime !== extraTime) this.addExtraTime();\n        if (this.props.pause !== pause) this.pauseResume();\n        this.stopAtZero();\n    }\n\n    componentWillUnmount() {\n        this.stopTimer();\n    }\n    render() {\n        return <div>Time Left: {this.state.time}</div>;\n    }\n}\n","// Returns a TimeSettings object corresponding to  difficulty\nexport default function timeDifficulty(difficulty) {\n    let time = {\n        easy: new TimeSettings(30, 10),\n        medium: new TimeSettings(20, 5),\n        hard: new TimeSettings(10, 2),\n        ultimate: new TimeSettings(5, 1)\n    };\n\n    return time[difficulty];\n}\n\nfunction TimeSettings(initTime, initExtra) {\n    this.initTime = initTime;\n    this.initExtra = initExtra;\n}\n","import React from \"react\";\nimport { Question } from \"./QuestionProvider\";\n\n// Component to display a Single Question.\nexport default function QuestionDisplay({ style }) {\n    return (\n        <Question.Consumer>\n            {({ state: { question } }) => (\n                <div\n                    style={style}\n                    dangerouslySetInnerHTML={{ __html: question }}\n                />\n            )}\n        </Question.Consumer>\n    );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Question } from \"./QuestionProvider\";\n\n// Component to display the possible answers to a question\nexport default function AnswersDisplay() {\n    return (\n        <Grid\n            container\n            justify=\"space-evenly\"\n            alignItems=\"stretch\"\n            alignContent=\"flex-end\"\n            spacing={1}\n        >\n            <Question.Consumer>\n                {({ state: { answers, correct_answer }, onClick }) =>\n                    answers.map((answer) => (\n                        <Answer\n                            key={answer}\n                            answer={answer}\n                            onClick={onClick}\n                            correct_answer={correct_answer}\n                        />\n                    ))\n                }\n            </Question.Consumer>\n        </Grid>\n    );\n}\n\n// Componenent to display a single answer\nfunction Answer({ answer, onClick, correct_answer }) {\n    return (\n        <Grid item xs={5}>\n            <Button\n                fullWidth\n                style={answerStyle}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => onClick(answer === correct_answer)}\n            >\n                <Typography variant=\"h6\">\n                    <span dangerouslySetInnerHTML={{ __html: answer }} />\n                </Typography>\n            </Button>\n        </Grid>\n    );\n}\n\nconst answerStyle = {\n    padding: \"5%\",\n    height: \"100%\"\n};\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Score from \"./Score\";\nimport Timer from \"components/Timer/Timer\";\nimport timeDifficulty from \"components/Timer/timeDifficulty\";\nimport QuestionDisplay from \"components/Question/QuestionDisplay\";\nimport AnswersDisplay from \"components/Question/AnswersDisplay\";\nimport { Typography } from \"@material-ui/core\";\n\n// Compononent to display the playing screen, displays a loading screen while waiting on game to begin.\nexport default function PlayingDisplay({\n    state: { score, extraTime, playing, pause },\n    finishGame,\n    difficulty,\n    categoryName\n}) {\n    if (playing)\n        return (\n            <React.Fragment>\n                <Grid\n                    container\n                    alignContent=\"flex-start\"\n                    justify=\"space-between\"\n                    direction=\"column\"\n                >\n                    <Grid container justify=\"space-between\">\n                        <Typography variant=\"h5\">\n                            <Score score={score} />\n                        </Typography>\n\n                        <Typography variant=\"h5\">\n                            <Timer\n                                timeSettings={timeDifficulty(difficulty)}\n                                extraTime={extraTime}\n                                finishGame={finishGame}\n                                pause={pause}\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid container justify=\"space-between\">\n                        <Typography\n                            variant=\"subtitle1\"\n                            color=\"textSecondary\"\n                            justify=\"center\"\n                        >\n                            Category: {categoryName}\n                        </Typography>\n                        <Typography\n                            variant=\"subtitle1\"\n                            color=\"textSecondary\"\n                            justify=\"center\"\n                        >\n                            Difficulty: {capitalize(difficulty)}\n                        </Typography>\n                    </Grid>\n\n                    <QuestionDisplay style={questionStyle} />\n                </Grid>\n                <AnswersDisplay />\n            </React.Fragment>\n        );\n    else\n        return (\n            <Grid\n                container\n                justify=\"center\"\n                direction=\"column\"\n                alignItems=\"center\"\n            >\n                <CircularProgress size={100} thickness={5} />\n            </Grid>\n        );\n}\n\nconst capitalize = (str) =>\n    str.replace(/^(\\w)(.*)/, (match, p1, p2) => p1.toUpperCase() + p2);\n\nconst questionStyle = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexGrow: 1,\n    textAlign: \"center\",\n    fontSize: \"2rem\"\n};\n","import React from \"react\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\n\n// Component to display a pause overlay that covers entire screen.\nexport default function PauseOverlay() {\n    return (\n        <Grid\n            container\n            justify=\"space-between\"\n            direction=\"column\"\n            style={pauseStyle}\n        >\n            <Typography\n                variant=\"h1\"\n                align=\"center\"\n                color=\"primary\"\n                style={pauseText}\n            >\n                Getting More Questions\n            </Typography>\n            <LinearProgress variant=\"query\" />\n        </Grid>\n    );\n}\n\nconst pauseText = {\n    marginTop: \"25%\"\n};\nconst pauseStyle = {\n    zIndex: 1,\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    opacity: 0.9,\n    backgroundColor: \"black\"\n};\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport QuestionProvider from \"components/Question/QuestionProvider\";\nimport EndGameDisplay from \"./EndGameDisplay\";\nimport { Settings } from \"components/Settings/SettingsProvider\";\nimport PlayingDisplay from \"./PlayingDisplay\";\nimport PauseOverlay from \"./PauseOverlay\";\n\n// Displays the Game State\nexport default function GameDisplay({\n    props: {\n        state: { pause, playing, finish, endGameMsg, newQ, score },\n        state,\n        startGame,\n        finishGame,\n        pauseGame,\n        resumeGame,\n        handleClick\n    }\n}) {\n    return (\n        <Grid container>\n            {pause && <PauseOverlay />}\n            {!finish && (\n                <Settings.Consumer>\n                    {({ state: { difficulty }, categoryId, categoryName }) => (\n                        <QuestionProvider\n                            startGame={startGame}\n                            finishGame={finishGame}\n                            category={categoryId}\n                            difficulty={difficulty}\n                            newQ={newQ}\n                            onClick={handleClick}\n                            pauseGame={pauseGame}\n                            resumeGame={resumeGame}\n                        >\n                            <PlayingDisplay\n                                state={state}\n                                difficulty={difficulty}\n                                finishGame={finishGame}\n                                categoryName={categoryName}\n                            />\n                        </QuestionProvider>\n                    )}\n                </Settings.Consumer>\n            )}\n            {!playing && finish && (\n                <EndGameDisplay score={score} endGameMsg={endGameMsg} />\n            )}\n        </Grid>\n    );\n}\n","import React from \"react\";\nimport GameDisplay from \"./GameDisplay\";\n\n// Provides game controls and state\nexport default class Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playing: false,\n            finish: false,\n            newQ: false,\n            score: 0,\n            extraTime: false,\n            endGameMsg: \"\",\n            pause: false\n        };\n\n        this.startGame = this.startGame.bind(this);\n        this.finishGame = this.finishGame.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.pauseGame = this.pauseGame.bind(this);\n        this.resumeGame = this.resumeGame.bind(this);\n    }\n\n    handleClick(correct) {\n        const newScore = ({ score }) => {\n            score += correct ? 1 : 0;\n            return score;\n        };\n        const isExtraTime = ({ extraTime }) =>\n            correct ? !extraTime : extraTime;\n\n        this.setState({\n            score: newScore(this.state),\n            extraTime: isExtraTime(this.state),\n            newQ: !this.state.newQ\n        });\n    }\n    pauseGame() {\n        this.setState({ pause: true });\n    }\n    resumeGame() {\n        this.setState({ pause: false });\n    }\n    startGame() {\n        this.setState({ playing: true });\n    }\n\n    finishGame(msg) {\n        this.setState({ playing: false, finish: true, endGameMsg: msg });\n    }\n\n    render() {\n        return <GameDisplay props={this} />;\n    }\n}\n","import request from \"./request\";\n\n// Returns available categories\nexport default async function getCategories() {\n    const query = \"api_category.php\";\n    const response = await request(query, false);\n    return response.trivia_categories;\n}\n","import React, { useState } from \"react\";\nimport Fab from \"@material-ui/core/Fab\";\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Input from \"@material-ui/core/Input\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Settings } from \"./SettingsProvider\";\nimport getCategories from \"trivia/getCategories\";\n\nconst useStyles = makeStyles((theme) => ({\n    playBtn: {\n        marginTop: theme.spacing(5)\n    },\n    select: {\n        fontSize: \"1.5rem\"\n    }\n}));\n\n// Component to display a level selection form.\nexport default function LevelSelect() {\n    const classes = useStyles();\n    return (\n        <Settings.Consumer>\n            {({ state: { difficulty, category }, onChange, onClick }) => (\n                <Grid container justify=\"center\" alignContent=\"space-around\">\n                    <FormControl>\n                        <DifficultySelect\n                            difficulty={difficulty}\n                            onChange={onChange}\n                            className={classes.select}\n                        />\n\n                        <CategorySelect\n                            category={category}\n                            onChange={onChange}\n                            className={classes.select}\n                        />\n                        <Fab\n                            size=\"large\"\n                            onClick={onClick}\n                            className={classes.playBtn}\n                            variant=\"extended\"\n                            color=\"primary\"\n                        >\n                            <Typography variant=\"h4\">Start</Typography>\n                        </Fab>\n                    </FormControl>\n                </Grid>\n            )}\n        </Settings.Consumer>\n    );\n}\n\n// Componenent to select a difficulty\nfunction DifficultySelect({ difficulty, onChange, className }) {\n    return (\n        <FormControl>\n            <InputLabel htmlFor=\"difficulty-select\">Difficulty</InputLabel>\n            <NativeSelect\n                className={className}\n                value={difficulty}\n                onChange={onChange}\n                input={<Input name=\"difficulty\" id=\"difficulty-select\" />}\n            >\n                <option value=\"easy\">Easy</option>\n                <option value=\"medium\">Medium</option>\n                <option value=\"hard\">Hard</option>\n                <option value=\"ultimate\">Ultimate</option>\n            </NativeSelect>\n        </FormControl>\n    );\n}\n\n// Componenet to select a category\nfunction CategorySelect({ category, onChange, className }) {\n    const [categories, setCategories] = useState([]);\n\n    // Populate categories with the categories available in the DB.\n    if (categories.length === 0)\n        getCategories().then((categories) => setCategories(categories));\n\n    return (\n        <FormControl>\n            <InputLabel htmlFor=\"category-select\">Category</InputLabel>\n            <NativeSelect\n                className={className}\n                value={category}\n                onChange={onChange}\n                input={<Input name=\"category\" id=\"category-select\" />}\n            >\n                {categories.map((category) => (\n                    <option\n                        key={category.id}\n                        value={JSON.stringify({\n                            id: category.id,\n                            name: category.name\n                        })}\n                    >\n                        {category.name}\n                    </option>\n                ))}\n            </NativeSelect>\n        </FormControl>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport SettingsProvider from \"./components/Settings/SettingsProvider\";\nimport Game from \"./components/Game/Game\";\nimport LevelSelect from \"./components/Settings/LevelSelect\";\n\nexport default function App() {\n    const [displayGame, setDisplayGame] = useState(false); // false to show settings\n\n    return (\n        <Container maxWidth=\"lg\">\n            <SettingsProvider setDisplayGame={setDisplayGame}>\n                {!displayGame && <LevelSelect />}\n                {displayGame && <Game />}\n            </SettingsProvider>\n        </Container>\n    );\n}\n"],"sourceRoot":""}